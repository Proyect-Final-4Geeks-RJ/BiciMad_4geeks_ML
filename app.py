import streamlit as st
from PIL import Image
import io
import base64
from colorama import init, Fore, Back, Style
import webbrowser
import requests
import folium
import openrouteservice
import pandas as pd
from openrouteservice import Client
from openrouteservice import directions
from geopy.distance import geodesic
from geopy.geocoders import Nominatim


# add kitten logo
icon = Image.open(r'C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\logo_bicimad.png') 

st.set_page_config(page_title="Caso BiciMad, evoluci√≥n del negocio | By Rub√©n Carrasco & Juan Lizondo",
                   page_icon=icon,
                   layout="wide",
                   initial_sidebar_state="expanded"
 )     

def get_base64(img_path):
    with open(img_path, 'rb') as img_file:
        return base64.b64encode(img_file.read()).decode()

def set_background(png_file):
    bin_str = get_base64(png_file)
    page_bg_img = '''
    <style>
    .stApp {
    background-image: url("data:image/png;base64,%s");
    background-size: cover;
    }
    </style>
    ''' % bin_str
    st.markdown(page_bg_img, unsafe_allow_html=True)

set_background(r'C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\fondo_compo_b.png')

# Configuraciones botones:
# Funci√≥n para cambiar el estilo del bot√≥n
# Define un ID √∫nico para la columna que contiene los botones
column_id = "mi_columna_con_botones"

# P√°gina Principal
def page_home():
# Dividir la pantalla en dos columnas
    col1, col2 = st.columns([2,  2])
    with col1:
        with st.expander('PREDICCIONES DE MACHINE LEARNING :bulb::'): 
            # Crear un generador para las claves de los botones
            widget_id = (id for id in range(1,  10000))

        # Diccionario con descripciones para cada opci√≥n
            descripciones = {
            'Minutos de viaje al mes': '''''',
            'Distancia recorrida al mes': '''''',
            'Bicicletas usadas cada mes': ''''''
            }

        # Crear el selectbox
            prediccion = st.selectbox('',list(descripciones.keys()))
            # Agrupar los botones en un contenedor
            with st.container():
                    # Dividir el contenedor en tres columnas para los botones
                    row1_col1, row1_col2, row1_col3 = st.columns(3)  
                    if prediccion == 'Minutos de viaje al mes':
                        def change_prediction(new_prediction):
                            st.session_state.prediccion = new_prediction
                        if st.button('Decripci√≥n del caso', on_click=change_prediction, args=['Decripci√≥n del caso']):
                    # Este c√≥digo se ejecutar√° cuando se haga clic en el bot√≥n
                            pass
                            return st.write(f'''
                                            Este detalle muestra la suma de los tiempos medios de los recorridos en :bike: üö¥‚Äç‚ôÇÔ∏è
                                            de los usuarios por mes. La **inversi√≥n** en flota de bicicletas y de estaciones üèûÔ∏è
                                            han sido implementadas en nuestro modelo para adecuar la predicci√≥n al estado actual de  2024. üìÖ
                                            Vemos c√≥mo la curva se hace estacionaria en los mismos meses pero üåà
                                            c√≥mo el tiempo mensual ha crecido exponencialmente. üìà
                                            ''')
                        if row1_col1.button('Predicci√≥n 3 meses', key=column_id):
                            minutes3 = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\minutes3.png")
                            st.image(minutes3, 'Predicci√≥n con valores relativos por l√≠mite computacional')
                        if row1_col2.button('Predicci√≥n 6 meses', key=column_id + '-btn2'):
                            minutes6 = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\minutes6.png")
                            st.image(minutes6, 'Predicci√≥n con valores relativos por l√≠mite computacional')
                        if row1_col3.button('Predicci√≥n de 1 a√±o', key=column_id + '-btn3'):
                            minutes12 = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\minutes12.png")
                            st.image(minutes12, 'Predicci√≥n con valores relativos por l√≠mite computacional')
                    
                    elif prediccion == 'Distancia recorrida al mes':
                        def change_prediction(new_prediction):
                            st.session_state.prediccion = new_prediction
                        if st.button('Decripci√≥n del caso', on_click=change_prediction, args=['Decripci√≥n del caso']):
                    # Este c√≥digo se ejecutar√° cuando se haga clic en el bot√≥n
                            pass
                            return st.write('''üö¥ Este detalle muestra la suma de las distancias medias de los recorridos en bicicleta üö¥
                                            de los usuarios por mes. La **inversi√≥n** en flota de bicicletas y estaciones üèûÔ∏è
                                            han sido consideradas en nuestro modelo para adaptar la predicci√≥n a la situaci√≥n actual üìÜ
                                            de  2024. Al igual que con los minutos, la curva sube creciendo en datos ‚¨ÜÔ∏è
                                            pero con la particularidad de incrementar las distancias entre estaciones. üîÑ'''
                                            )
                        if row1_col1.button('Predicci√≥n 3 meses', key=next(widget_id)):
                            distance3 = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\distance3.png")
                            st.image(distance3, 'Predicci√≥n con valores relativos por l√≠mite computacional')
                        if row1_col2.button('Predicci√≥n 6 meses', key=next(widget_id)):
                            distance6 = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\distance6.png")
                            st.image(distance6, 'Predicci√≥n con valores relativos por l√≠mite computacional')
                        if row1_col3.button('Predicci√≥n de 1 a√±o', key=next(widget_id)):
                            distance12 = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\distance12.png")
                            st.image(distance12, 'Predicci√≥n con valores relativos por l√≠mite computacional')

                    elif prediccion == 'Bicicletas usadas cada mes':
                        def change_prediction(new_prediction):
                            st.session_state.prediccion = new_prediction
                        if st.button('Decripci√≥n del caso', on_click=change_prediction, args=['Decripci√≥n del caso']):
                    # Este c√≥digo se ejecutar√° cuando se haga clic en el bot√≥n
                            pass
                            return st.write('''
                                            :bicyclist::bicyclist: Este detalle muestra la suma total de :bike: de los usuarios por mes.  
                                            En este caso, hemos utilizado los datos absolutos que dispon√≠amos üìä y a√±adido la nueva flota de bicicletas üö≤ de  2023.  
                                            Vemos c√≥mo la predicci√≥n hace pr√°cticamente un calco de la curva de los datos obtenidos en  2022 üìà, siendo la predicci√≥n menos comprometida de nuestro modelo. :mag_right:
                                            ''')
                        if row1_col1.button('Predicci√≥n 3 meses', key=next(widget_id)):
                            bikes3 = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\bikes3.png")
                            st.image(bikes3, caption='Predicci√≥n con valores absolutos sin l√≠mite computacional')
                        if row1_col2.button('Predicci√≥n 6 meses', key=next(widget_id)):
                            bikes6 = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\bikes6.png")
                            st.image(bikes6, caption='Predicci√≥n con valores absolutos sin l√≠mite computacional')
                        if row1_col3.button('Predicci√≥n de 1 a√±o', key=next(widget_id)):
                            bikes12 = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\bikes12.png")
                            st.image(bikes12, caption='Predicci√≥n con valores absolutos sin l√≠mite computacional')
                    
    with col2:
        with st.expander('MEJORAS EN LA USABILIDAD DE LA APP BiciMad :world_map::'): 
            # Diccionario con descripciones para cada opci√≥n
            implementos = {
            'Gamificaci√≥n y usabilidad de la APP': '''Mediante esta implemantaci√≥n, mejoramos la usabilidad de acceso,
            ruta personalizada e introducimos una gamificaci√≥n para el usuario.''',
            }

        # Crear el selectbox
            prediccion = st.selectbox('',list(implementos.keys()))

            # Agrupar el bot√≥n en un contenedor
            with st.container(): 
                def change_prediction(new_prediction):
                            st.session_state.prediccion = new_prediction
                if st.button('Explicaci√≥n', on_click=change_prediction, args=['Decripci√≥n del caso']):
                    # Este c√≥digo se ejecutar√° cuando se haga clic en el bot√≥n
                    pass
                    return st.markdown('''
                                        Hemos trabajado en unas mejoras en la usabilidad de la aplicaci√≥n de BiciMad:

                                        - Por un lado, obtener una puntuaci√≥n en base al uso que haces de las bicicletas üö¥‚Äç‚ôÇÔ∏èüö≤
                                        - Por otro, mejorar la precisi√≥n de la ubicaci√≥n, por proximidad a tu estaci√≥n de biciMAD üìçüõ°Ô∏è

                                        Estas ideas, nacen del estudio de los datos y de la elaboraci√≥n del trabajo como propuestas a valorar para el gestor üìäüíº
                                        ''')
                # Mostrar el bot√≥n:
                if prediccion == 'Gamificaci√≥n y usabilidad de la APP':
                     # Define a session state variable to track if the button has been clicked
                    if 'button_clicked' not in st.session_state:
                        st.session_state.button_clicked = False

                    # Function to handle the button click
                    def handle_button_click():
                        st.session_state.button_clicked = True

                    # Create the button and associate it with the click handler
                    if st.button('Prueba el uso', on_click=handle_button_click):
                        pass  # Handle the button click event here

                            # Initialize ORS client
                        ors_client = Client(key='5b3ce3597851110001cf6248b1eae734bbbd486a9454e8190d51e71b')
                        
                        # Definimos los l√≠mites de Madrid
                        madrid_bounds = {'west': -3.889004, 'south': 40.312071, 'east': -3.518011, 'north': 40.643523}

                        def create_station_data(data_series):
                            if madrid_bounds['west'] <= data_series['longitude_unlock'] <= madrid_bounds['east'] and madrid_bounds['south'] <= data_series['latitude_unlock'] <= madrid_bounds['north']:
                                return {
                                        'station_id': data_series['unlock_station_name_n'],
                                        'latitude': data_series['latitude_unlock'],
                                        'longitude': data_series['longitude_unlock'],
                                        'address': data_series['station_unlock']
                                        }
                            else:
                                return None

                        def get_user_location():
                            while True:
                                address = input("Ingrese su direcci√≥n: ")
                                geolocator = Nominatim(user_agent="geo_locator")
                                location = geolocator.geocode(address)

                                if location and madrid_bounds['west'] <= location.longitude <= madrid_bounds['east'] and madrid_bounds['south'] <= location.latitude <= madrid_bounds['north']:
                                    return location.latitude, location.longitude, address
                                else:
                                    print("La direcci√≥n proporcionada no est√° en Madrid. Intente nuevamente.")
                        # def get_nearest_bike_station(user_location, station_data):
                        def get_nearest_bike_station(user_location, station_data):
                            # Convertir las coordenadas de usuario a n√∫meros flotantes si son cadenas
                            user_location_coords = tuple(map(float, user_location))
                            
                            # Calcular la distancia entre el usuario y cada estaci√≥n
                            distances = [(geodesic(user_location_coords, (float(station['latitude']), float(station['longitude']))).km, station) for station in station_data]
                            
                            # Ordenar las estaciones por distancia y seleccionar la m√°s cercana
                            nearest_station = min(distances, key=lambda x: x[0])[1]
                            
                            return nearest_station

                            # return min(station_data, key=lambda station: geodesic(user_location[:2], (station['latitude'], station['longitude'])).kilometers)
                
                            # Cargamos el DataFrame con los datos reales
                        data_series = pd.read_csv(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\interim\bicimad_time_series.csv", sep=',')

                            # Aseg√∫rate de ajustar el nombre de las columnas seg√∫n tus datos reales
                        station_data = [create_station_data(row) for _, row in data_series.iterrows() if create_station_data(row)]

                        def get_route_and_score(start_lat, start_lon, end_lat, end_lon):
                                            # Get the route using ORS
                            route = ors_client.directions([(start_lon, start_lat), (end_lon, end_lat)], profile='cycling-regular')
                                            
                                            # Calculate the distance of the route
                            distance = route['routes'][0]['summary']['distance'] /  1000  # Convert to kilometers
                                            
                                            # Calculate carbon emission and calories burned
                            emission_savings, calories_kcal = calculate_carbon_emission_and_calories(distance, 'bicycle')
                                            
                                            # Calculate score based on distance and emission savings
                            score = int(distance) + int(emission_savings)
                                            
                            return route, score

                        def calculate_carbon_emission_and_calories(distance, transportation_mode, fuel_type='gasoline'):
                            # Factores de emisi√≥n y consumo predefinidos para diferentes modos de transporte y tipos de combustible
                            emission_factors = {'bicycle': 0.0, 'bus': 0.1, 'car': {'gasoline': 2.35, 'diesel': 2.64}}
                            consumption_factors = {'gasoline': 5.4, 'diesel': 4.8}  # L/100km
                            
                            emission_factor_car = emission_factors.get('car', {}).get(fuel_type, 0.0)
                            emission_factor_bicycle = emission_factors.get('bicycle', 0.0)
                            
                            # Calcular emisiones de CO2 para autom√≥vil y bicicleta
                            total_emission_car = emission_factor_car / 100 * consumption_factors.get(fuel_type, 0.0) * distance
                            total_emission_bicycle = emission_factor_bicycle * distance
                            
                            # Calcular el ahorro de emisiones al usar la bicicleta en lugar del autom√≥vil
                            emission_savings = total_emission_car - total_emission_bicycle
                            
                            # Calcular calor√≠as gastadas (supongamos una velocidad promedio de 20 km/h)
                            speed_kmh = 20
                            if transportation_mode == 'bicycle':
                                if speed_kmh <= 15:
                                    total_calories = 300 * distance
                                elif speed_kmh <= 18:
                                    total_calories = 420 * distance
                                elif speed_kmh <= 22:
                                    total_calories = 600 * distance
                                elif speed_kmh <= 28:
                                    total_calories = 850 * distance
                                else:
                                    total_calories = 1000 * distance
                            else:
                                total_calories = 0.0
                            
                            # Convertir calor√≠as a kilocalor√≠as (1 Cal = 1 kcal)
                            total_calories_kcal = total_calories / 1000
                            
                            return emission_savings, total_calories_kcal

                            # Streamlit app
                    def main():
                            # Input fields for start and destination                  
                        start_address = st.text_input("¬øD√≥nde estoy?") 
                        end_address = st.text_input("¬øA d√≥nde voy?")
                        nearest_station_in = get_nearest_bike_station(start_address, station_data)
                        nearest_station_out = get_nearest_bike_station(end_address, station_data)

                        if start_address and end_address:
                                        # Geocode the addresses
                            start_geocode_result = ors_client.pelias_search(text=start_address)
                            end_geocode_result = ors_client.pelias_search(text=end_address)
                                                        
                            if start_geocode_result['type'] == 'FeatureCollection' and len(start_geocode_result['features']) >  0 and \
                                end_geocode_result['type'] == 'FeatureCollection' and len(end_geocode_result['features']) >  0:
                                                            
                                start_coords = start_geocode_result['features'][0]['geometry']['coordinates']
                                end_coords = end_geocode_result['features'][0]['geometry']['coordinates']

                            # Get the route and calculate score
                                route, score = get_route_and_score(*start_coords, *end_coords)                                                       
                            # Display route and score
                                st.write(f"Ruta desde {start_address} hasta {end_address}:")
                                st.write(f"Dir√≠gete desde la estacio: {nearest_station_in} hasta la estaci√≥n: {nearest_station_out}:")
                                st.map(nearest_station_in, nearest_station_out)
                                #st.map(route['routes'][0]['geometry']['coordinates'])
                                st.write(f'''Tu puntuaci√≥n es: ¬°¬°¬°{score}!!!:clap::clap::clap::clap::clap:, 
                                        esto es gracias a las calor√≠as gastadas por la velocidad en que 
                                        lo has hecho, y por la distancia recorriday tambi√©n por tu 
                                        contribuci√≥n al ahorro de emisiones en nuestra ciudad
                                        por usar la bicicleta :smiley: ''')

                            else:
                                st.error("No se pudieron geocodificar las direcciones. Por favor, int√©ntalo de nuevo.")

                    if __name__ == "__main__":
                        main()

# Informaci√≥n Adicional
def page_info():
    col1, col2 = st.columns([2,  2])
    with col1:
        with st.expander('Acerca del proyecto sobre BiciMAD :bike:'):
            proyecto = Image.open(r'C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\Proyecto.png')
            st.image(proyecto, use_column_width=True)
        with st.expander('Conclusiones del proyecto :waving_white_flag:'):
            st.write('''üö¥‚Äç‚ôÇÔ∏è Dada la situaci√≥n actual de monopolio de BiciMad en la red de alquiler
                      de bicicletas de la ciudad, es razonable esperar que los datos de crecimiento
                      que hemos obtenido sean muy positivos. üìà''')
            st.write('''üîç El modelo respalda esta tendencia empresarial y puede garantizar que, sin
                      tener en cuenta solo ganancias y sin conocer los costos de implementaci√≥n, 
                     cualquier mejora que pueda aportar este servicio resultar√° en un crecimiento 
                     exponencial de los datos. üöÄ''')

           
    with col2:
        with st.expander('Acerca del modelo de Machine Learning :bookmark_tabs:'):
            st.write('''*Despu√©s de analizar el problema comercial üß© y estipular que 
                     √©ste ser√≠a una cuesti√≥n de series temporales, estudiamos todas las
                      posibilidades de los modelos aprendidos:*''') 
            st.write('''*ARIMA, XGBoost, SVG,... tanto modelos univariantes como multivariantes*.*''') 
            st.write('''***Finalmente y tras varias m√©tricas y evaluaciones, 
                     obtuvimos mejores resultados para una red neuronal basada en el LSTM üß†.***''') 
            st.write('''*Las Unidades de Memoria a Largo Plazo (LSTM, por sus siglas en ingl√©s) 
                     son una arquitectura de red neuronal dise√±ada para superar el problema 
                     de "desvanecimiento del gradiente" üîÑ, que limita la capacidad para 
                     aprender dependencias a largo plazo. Las LSTM introducen una celda de 
                     memoria que puede mantener u olvidar informaci√≥n a largo plazo, y √©sta 
                     celda se actualiza con cada paso temporal en la secuencia. Nuestros 
                     resultados mejoraron significativamente gracias a esta implementaci√≥n üìà.*''')
        with st.expander('Limitaciones y procesos de mejora :point_up_2:'):
            st.write("""*Uno de los mayores inconvenientes con el procesamiento de los datos,  
            ha sido la imposibilidad de poder limpiar y mergear datos relativos a la  
            informaci√≥n de las estaciones, por lo que hemos podido averiguar, han limitado
            la informaci√≥n que s√≠ ofrec√≠an a√±os atr√°s.* ‚ö†Ô∏è""")

            st.write("""Otro de los problemas m√°s importantes es que los datos referidos a todo el a√±o
            2022, supon√≠an una carga de casi  4 millones y medio de filas, lo que ha conllevado
            en nuestra limitaci√≥n computacional, a tener que seleccionar una muestra m√°s peque√±a
            de nuestro conjunto*.* üìä""")

            st.write("""***Este proyecto tiene mucho margen de mejora si solventamos, con tiempo, nuestras
            limitaciones antes referidas. En una versi√≥n  2.0 del proyecto, la demanda de localizaci√≥n
            de estaciones y de bicicletas supondr√° una predicci√≥n muy interesante para analizar.*** üöÄ""")

            st.write("""Otro de los aspectos interesantes de poder predecir y analizar, son los costos operativos.
            Si consiguieramos informaci√≥n adicional de la inversi√≥n de bicicletas, estaciones, personal y
            dem√°s indicadores econ√≥micos del negocio, podr√≠amos retornar y aventurarnos a ofrecer visiones
            de negocio a futuro.* üí∞üìà""")
 

    # Selecci√≥n de la p√°gina a mostrar
pages = {
        "Despliegue": page_home,
        "Proyecto": page_info,
    }
logo = Image.open(r'C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\Logo_Bicimad_-_EMT.png')
st.sidebar.image(logo)
st.sidebar.header("Proyecto BiciMad :bike:")
# st.sidebar.text("*Rub√©n Carrasco")
# linkedin_icon_url = Image.open(r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\linkedin.png")
# linkedin_profile_url = "https://www.linkedin.com/in/rub%C3%A9n-carrasco-143145135/"
# with st.sidebar:
#         st.markdown(f"[![LinkedIn]({linkedin_icon_url})]({linkedin_profile_url})", unsafe_allow_html=True)
def load_image(file_path):
    with Image.open(file_path) as img:
        buffered = io.BytesIO()
        img.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
    return img_str
linkedin_icon_path = r"C:\Users\LuyinPC\Desktop\Bici-Mad\BiciMad_4geeks_ML\BiciMad_4geeks_ML\data\graficos\images\linkedin.png"
linkedin_icon_base64 = load_image(linkedin_icon_path)
linkedin_profile_url_juan = "https://www.linkedin.com/in/juanlizondo/"
linkedin_profile_url_ruben = "https://www.linkedin.com/in/juanlizondo/"
with st.sidebar:
    st.markdown(
        f"""***Rub√©n Carrasco*** 
        <a href="{linkedin_profile_url_ruben}" target="_blank">
            <img src="data:image/png;base64,{linkedin_icon_base64}" alt="LinkedIn Icon" width="15px" height="15px"/>
        </a>
        """,
        unsafe_allow_html=True
    )
with st.sidebar:
    st.markdown(
        f"""***Juan Lizondo*** 
        <a href="{linkedin_profile_url_juan}" target="_blank">
            <img src="data:image/png;base64,{linkedin_icon_base64}" alt="LinkedIn Icon" width="15px" height="15px"/>
        </a>
        """,
        unsafe_allow_html=True
    )
selection = st.sidebar.radio("***P√°ginas***", list(pages.keys()))
# Llamada a la funci√≥n correspondiente a la selecci√≥n
pages[selection]()